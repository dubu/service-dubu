package com.dubu.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class RankerExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public RankerExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andMzUserIdIsNull() {
            addCriterion("mz_user_id is null");
            return (Criteria) this;
        }

        public Criteria andMzUserIdIsNotNull() {
            addCriterion("mz_user_id is not null");
            return (Criteria) this;
        }

        public Criteria andMzUserIdEqualTo(Integer value) {
            addCriterion("mz_user_id =", value, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andMzUserIdNotEqualTo(Integer value) {
            addCriterion("mz_user_id <>", value, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andMzUserIdGreaterThan(Integer value) {
            addCriterion("mz_user_id >", value, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andMzUserIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("mz_user_id >=", value, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andMzUserIdLessThan(Integer value) {
            addCriterion("mz_user_id <", value, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andMzUserIdLessThanOrEqualTo(Integer value) {
            addCriterion("mz_user_id <=", value, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andMzUserIdIn(List<Integer> values) {
            addCriterion("mz_user_id in", values, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andMzUserIdNotIn(List<Integer> values) {
            addCriterion("mz_user_id not in", values, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andMzUserIdBetween(Integer value1, Integer value2) {
            addCriterion("mz_user_id between", value1, value2, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andMzUserIdNotBetween(Integer value1, Integer value2) {
            addCriterion("mz_user_id not between", value1, value2, "mzUserId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdIsNull() {
            addCriterion("tournament_id is null");
            return (Criteria) this;
        }

        public Criteria andTournamentIdIsNotNull() {
            addCriterion("tournament_id is not null");
            return (Criteria) this;
        }

        public Criteria andTournamentIdEqualTo(Integer value) {
            addCriterion("tournament_id =", value, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdNotEqualTo(Integer value) {
            addCriterion("tournament_id <>", value, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdGreaterThan(Integer value) {
            addCriterion("tournament_id >", value, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("tournament_id >=", value, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdLessThan(Integer value) {
            addCriterion("tournament_id <", value, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdLessThanOrEqualTo(Integer value) {
            addCriterion("tournament_id <=", value, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdIn(List<Integer> values) {
            addCriterion("tournament_id in", values, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdNotIn(List<Integer> values) {
            addCriterion("tournament_id not in", values, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdBetween(Integer value1, Integer value2) {
            addCriterion("tournament_id between", value1, value2, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentIdNotBetween(Integer value1, Integer value2) {
            addCriterion("tournament_id not between", value1, value2, "tournamentId");
            return (Criteria) this;
        }

        public Criteria andTournamentPointIsNull() {
            addCriterion("tournament_point is null");
            return (Criteria) this;
        }

        public Criteria andTournamentPointIsNotNull() {
            addCriterion("tournament_point is not null");
            return (Criteria) this;
        }

        public Criteria andTournamentPointEqualTo(Integer value) {
            addCriterion("tournament_point =", value, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andTournamentPointNotEqualTo(Integer value) {
            addCriterion("tournament_point <>", value, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andTournamentPointGreaterThan(Integer value) {
            addCriterion("tournament_point >", value, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andTournamentPointGreaterThanOrEqualTo(Integer value) {
            addCriterion("tournament_point >=", value, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andTournamentPointLessThan(Integer value) {
            addCriterion("tournament_point <", value, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andTournamentPointLessThanOrEqualTo(Integer value) {
            addCriterion("tournament_point <=", value, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andTournamentPointIn(List<Integer> values) {
            addCriterion("tournament_point in", values, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andTournamentPointNotIn(List<Integer> values) {
            addCriterion("tournament_point not in", values, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andTournamentPointBetween(Integer value1, Integer value2) {
            addCriterion("tournament_point between", value1, value2, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andTournamentPointNotBetween(Integer value1, Integer value2) {
            addCriterion("tournament_point not between", value1, value2, "tournamentPoint");
            return (Criteria) this;
        }

        public Criteria andStatusIsNull() {
            addCriterion("status is null");
            return (Criteria) this;
        }

        public Criteria andStatusIsNotNull() {
            addCriterion("status is not null");
            return (Criteria) this;
        }

        public Criteria andStatusEqualTo(Boolean value) {
            addCriterion("status =", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotEqualTo(Boolean value) {
            addCriterion("status <>", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThan(Boolean value) {
            addCriterion("status >", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusGreaterThanOrEqualTo(Boolean value) {
            addCriterion("status >=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThan(Boolean value) {
            addCriterion("status <", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusLessThanOrEqualTo(Boolean value) {
            addCriterion("status <=", value, "status");
            return (Criteria) this;
        }

        public Criteria andStatusIn(List<Boolean> values) {
            addCriterion("status in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotIn(List<Boolean> values) {
            addCriterion("status not in", values, "status");
            return (Criteria) this;
        }

        public Criteria andStatusBetween(Boolean value1, Boolean value2) {
            addCriterion("status between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andStatusNotBetween(Boolean value1, Boolean value2) {
            addCriterion("status not between", value1, value2, "status");
            return (Criteria) this;
        }

        public Criteria andRegdttmIsNull() {
            addCriterion("regdttm is null");
            return (Criteria) this;
        }

        public Criteria andRegdttmIsNotNull() {
            addCriterion("regdttm is not null");
            return (Criteria) this;
        }

        public Criteria andRegdttmEqualTo(Date value) {
            addCriterion("regdttm =", value, "regdttm");
            return (Criteria) this;
        }

        public Criteria andRegdttmNotEqualTo(Date value) {
            addCriterion("regdttm <>", value, "regdttm");
            return (Criteria) this;
        }

        public Criteria andRegdttmGreaterThan(Date value) {
            addCriterion("regdttm >", value, "regdttm");
            return (Criteria) this;
        }

        public Criteria andRegdttmGreaterThanOrEqualTo(Date value) {
            addCriterion("regdttm >=", value, "regdttm");
            return (Criteria) this;
        }

        public Criteria andRegdttmLessThan(Date value) {
            addCriterion("regdttm <", value, "regdttm");
            return (Criteria) this;
        }

        public Criteria andRegdttmLessThanOrEqualTo(Date value) {
            addCriterion("regdttm <=", value, "regdttm");
            return (Criteria) this;
        }

        public Criteria andRegdttmIn(List<Date> values) {
            addCriterion("regdttm in", values, "regdttm");
            return (Criteria) this;
        }

        public Criteria andRegdttmNotIn(List<Date> values) {
            addCriterion("regdttm not in", values, "regdttm");
            return (Criteria) this;
        }

        public Criteria andRegdttmBetween(Date value1, Date value2) {
            addCriterion("regdttm between", value1, value2, "regdttm");
            return (Criteria) this;
        }

        public Criteria andRegdttmNotBetween(Date value1, Date value2) {
            addCriterion("regdttm not between", value1, value2, "regdttm");
            return (Criteria) this;
        }

        public Criteria andModdttmIsNull() {
            addCriterion("moddttm is null");
            return (Criteria) this;
        }

        public Criteria andModdttmIsNotNull() {
            addCriterion("moddttm is not null");
            return (Criteria) this;
        }

        public Criteria andModdttmEqualTo(Date value) {
            addCriterion("moddttm =", value, "moddttm");
            return (Criteria) this;
        }

        public Criteria andModdttmNotEqualTo(Date value) {
            addCriterion("moddttm <>", value, "moddttm");
            return (Criteria) this;
        }

        public Criteria andModdttmGreaterThan(Date value) {
            addCriterion("moddttm >", value, "moddttm");
            return (Criteria) this;
        }

        public Criteria andModdttmGreaterThanOrEqualTo(Date value) {
            addCriterion("moddttm >=", value, "moddttm");
            return (Criteria) this;
        }

        public Criteria andModdttmLessThan(Date value) {
            addCriterion("moddttm <", value, "moddttm");
            return (Criteria) this;
        }

        public Criteria andModdttmLessThanOrEqualTo(Date value) {
            addCriterion("moddttm <=", value, "moddttm");
            return (Criteria) this;
        }

        public Criteria andModdttmIn(List<Date> values) {
            addCriterion("moddttm in", values, "moddttm");
            return (Criteria) this;
        }

        public Criteria andModdttmNotIn(List<Date> values) {
            addCriterion("moddttm not in", values, "moddttm");
            return (Criteria) this;
        }

        public Criteria andModdttmBetween(Date value1, Date value2) {
            addCriterion("moddttm between", value1, value2, "moddttm");
            return (Criteria) this;
        }

        public Criteria andModdttmNotBetween(Date value1, Date value2) {
            addCriterion("moddttm not between", value1, value2, "moddttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmIsNull() {
            addCriterion("pkey_moddttm is null");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmIsNotNull() {
            addCriterion("pkey_moddttm is not null");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmEqualTo(String value) {
            addCriterion("pkey_moddttm =", value, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmNotEqualTo(String value) {
            addCriterion("pkey_moddttm <>", value, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmGreaterThan(String value) {
            addCriterion("pkey_moddttm >", value, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmGreaterThanOrEqualTo(String value) {
            addCriterion("pkey_moddttm >=", value, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmLessThan(String value) {
            addCriterion("pkey_moddttm <", value, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmLessThanOrEqualTo(String value) {
            addCriterion("pkey_moddttm <=", value, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmLike(String value) {
            addCriterion("pkey_moddttm like", value, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmNotLike(String value) {
            addCriterion("pkey_moddttm not like", value, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmIn(List<String> values) {
            addCriterion("pkey_moddttm in", values, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmNotIn(List<String> values) {
            addCriterion("pkey_moddttm not in", values, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmBetween(String value1, String value2) {
            addCriterion("pkey_moddttm between", value1, value2, "pkeyModdttm");
            return (Criteria) this;
        }

        public Criteria andPkeyModdttmNotBetween(String value1, String value2) {
            addCriterion("pkey_moddttm not between", value1, value2, "pkeyModdttm");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated do_not_delete_during_merge Tue Dec 31 14:38:26 KST 2013
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table mz_profile_tournament_target
     *
     * @mbggenerated Tue Dec 31 14:38:26 KST 2013
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value) {
            super();
            this.condition = condition;
            this.value = value;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.betweenValue = true;
        }
    }
}